{
  "name": "Restapi-codegen-maven-plugin",
  "tagline": "",
  "body": "# REST API Codegenerator Maven Plugin\r\n\r\nAre you sick of always having to implement and maintain the client-side services for reaching your Rest API.\r\nWith the REST API Codegenerator Maven Plugin you are able to automatically generate the client-side code to reach your API.\r\n\r\nFor now the plugin scans your code for [Jersey](https://jersey.java.net/) resources and generates java code - see example of usage in the [akka-persistence-java-example](https://github.com/jansoren/akka-persistence-java-example)-project. In my next project I will extend the plugin to generate ReactJS code aswell.\r\n\r\nIf you find the plugin useful please give it a star. Also feel free to create pull requests and extend the plugin to generate for example Ajax, AngularJS or ReactJS code.\r\n\r\n## How to use the plugin for generating Java code\r\n\r\n1. Add the plugin to your `pom.xml` file, see example below.\r\n1. Run `mvn clean install` in your project folder\r\n1. The plugin will scan your source code and generate code out of your resource classes.\r\n\r\n### Plugin example\r\n\r\n- `generatedCodeFolder`: This is the folder where you want your generated code\r\n- `generatedCodePackage`: This is the package of your generated class files\r\n- `rootHost`: This is the host of your running application\r\n\r\n```maven\r\n<plugin>\r\n    <groupId>no.jansoren</groupId>\r\n    <artifactId>restapi-codegen-maven-plugin</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n    <configuration>\r\n        <generatedCodeFolder>../server-qtest/src/main/java</generatedCodeFolder>\r\n        <generatedCodePackage>com.example.qtest.services</generatedCodePackage>\r\n        <rootHost>http://localhost:8080</rootHost>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <phase>compile</phase>\r\n            <goals>\r\n                <goal>codegen</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```\r\n\r\n### Dependencies required\r\n```maven\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.core</groupId>\r\n    <artifactId>jersey-client</artifactId>\r\n    <version>2.23.2</version>\r\n</dependency>\r\n```\r\n\r\nIf you are using `MediaType.APPLICATION_JSON_TYPE` you also need this dependency\r\n```maven\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.media</groupId>\r\n    <artifactId>jersey-media-json-jackson</artifactId>\r\n    <version>2.13.2</version>\r\n</dependency>\r\n```\r\n\r\n## Example of generating ReactJS code\r\n\r\nNot implemented yet\r\n\r\n## How to get started developing\r\n\r\n1. Clone this repo `git clone git@github.com:jansoren/restapi-codegen-maven-plugin.git`\r\n1. Run `mvn clean install` in the `restapi-codegen-maven-plugin`-folder\r\n1. The unit tests have now generated some example code at [/src/test/java/com/example/helloworld/MyService.java](https://github.com/jansoren/restapi-codegen-maven-plugin/blob/master/src/test/java/com/example/helloworld/MyService.java)\r\n\r\n## Why this plugin\r\n\r\nOver the years I have created a few REST API's, and I always end up using alot of time implementing the client-side code for reaching the API's.\r\nIn one of the projects we had a Quality-test application implemented in java that ran tests continuously, something that required updating the client-side code rapidly.\r\nWith this challenge we ended up creating alot of the same boilerplate code for each new service to reach the API, and I felt that this code should and could be automaticly generated.\r\n\r\nIn the pursuit of finding such a product I ended up creating a proof of concept of this myself, at least to solve my current need.\r\n\r\nI hope this can be useful for others as well.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}